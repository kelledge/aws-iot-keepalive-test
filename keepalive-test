#!/usr/bin/env python

import boto3
import time
import atexit
import logging
import sys
import pprint
import uuid

from tempfile import NamedTemporaryFile

from AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTShadowClient
from AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient


ROOT_CA_CERT = """\
-----BEGIN CERTIFICATE-----
MIIE0zCCA7ugAwIBAgIQGNrRniZ96LtKIVjNzGs7SjANBgkqhkiG9w0BAQUFADCB
yjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL
ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp
U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW
ZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0
aG9yaXR5IC0gRzUwHhcNMDYxMTA4MDAwMDAwWhcNMzYwNzE2MjM1OTU5WjCByjEL
MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW
ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJpU2ln
biwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxWZXJp
U2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0aG9y
aXR5IC0gRzUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCvJAgIKXo1
nmAMqudLO07cfLw8RRy7K+D+KQL5VwijZIUVJ/XxrcgxiV0i6CqqpkKzj/i5Vbex
t0uz/o9+B1fs70PbZmIVYc9gDaTY3vjgw2IIPVQT60nKWVSFJuUrjxuf6/WhkcIz
SdhDY2pSS9KP6HBRTdGJaXvHcPaz3BJ023tdS1bTlr8Vd6Gw9KIl8q8ckmcY5fQG
BO+QueQA5N06tRn/Arr0PO7gi+s3i+z016zy9vA9r911kTMZHRxAy3QkGSGT2RT+
rCpSx4/VBEnkjWNHiDxpg8v+R70rfk/Fla4OndTRQ8Bnc+MUCH7lP59zuDMKz10/
NIeWiu5T6CUVAgMBAAGjgbIwga8wDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8E
BAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZMFcwVRYJaW1hZ2UvZ2lmMCEwHzAH
BgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7GS4wJRYjaHR0cDovL2xvZ28udmVy
aXNpZ24uY29tL3ZzbG9nby5naWYwHQYDVR0OBBYEFH/TZafC3ey78DAJ80M5+gKv
MzEzMA0GCSqGSIb3DQEBBQUAA4IBAQCTJEowX2LP2BqYLz3q3JktvXf2pXkiOOzE
p6B4Eq1iDkVwZMXnl2YtmAl+X6/WzChl8gGqCBpH3vn5fJJaCGkgDdk+bW48DW7Y
5gaRQBi5+MHt39tBquCWIMnNZBU4gcmU7qKEKQsTb47bDN0lAtukixlE0kF6BWlK
WE9gyn6CagsCqiUXObXbf+eEZSqVir2G3l6BFoMtEMze/aiCKm0oHw0LxOXnGiYZ
4fQRbxC1lfznQgUy286dUV4otp6F01vvpX1FQHKOtw5rDgb7MzVIcbidJ4vEZV8N
hnacRHr2lVz2XTIIM6RUthg/aFzyQkqFOFSDX9HoLPKsEdao7WNq
-----END CERTIFICATE-----\
"""


IOT_ADMIN_POLICY = """\
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "iot:*",
      "Resource": "*"
    }
  ]
}\
"""


def get_logger():
    """
    Handles python logging boilerplate
    """
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    streamHandler = logging.StreamHandler()
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    streamHandler.setFormatter(formatter)
    logger.addHandler(streamHandler)

    return logger


def create_thing_with_certificate(client):
    """
    Creates a unique thing, certificate, and policy.

    Names are based on the randomly generated certificate ID
    TODO: Should belong in a class
    """
    cert = client.create_keys_and_certificate(
        setAsActive=True
    )

    thing = client.create_thing(
        thingName=cert['certificateId']
    )

    policy = client.create_policy(
        policyName=cert['certificateId'],
        policyDocument=IOT_ADMIN_POLICY
    )

    assoc_principal = client.attach_thing_principal(
        thingName=cert['certificateId'],
        principal=cert['certificateArn']
    )

    assoc_plicy = client.attach_principal_policy(
        policyName=cert['certificateId'],
        principal=cert['certificateArn']
    )

    return thing, cert, policy


def remove_thing_with_certificate(client, thing, cert, policy):
    """
    Deletes a thing, certificate, policy tuple

    TODO: Should belong in a class
    """
    client.detach_thing_principal(
        thingName=thing['thingName'],
        principal=cert['certificateArn']
    )

    client.detach_principal_policy(
        policyName=policy['policyName'],
        principal=cert['certificateArn']
    )

    client.update_certificate(
        certificateId=cert['certificateId'],
        newStatus='INACTIVE'
    )

    client.delete_policy(
        policyName=policy['policyName']
    )

    client.delete_certificate(
        certificateId=cert['certificateId']
    )

    client.delete_thing(
        thingName=thing['thingName']
    )


def create_certificate_tempfiles(cert):
    """
    Creates the credentials as named temporary files.
    """
    root_ca = NamedTemporaryFile(delete=True)
    private_key = NamedTemporaryFile(delete=True)
    certificate = NamedTemporaryFile(delete=True)

    root_ca.write(ROOT_CA_CERT)
    private_key.write(cert['keyPair']['PrivateKey'])
    certificate.write(cert['certificatePem'])

    root_ca.flush()
    private_key.flush()
    certificate.flush()

    return root_ca, private_key, certificate


def remove_certificate_tempfiles(root_ca, private_key, certificate):
    """
    Closes (and therefore removes from disk) the credential files
    """
    root_ca.close()
    private_key.close()
    certificate.close()


def main():
    """
    Main entry point.

    Spins up an epemeral IoT Thing and connects to AWS IoT to test if keepalive
    messages are counted against your bill.
    """
    logger = get_logger()
    client = boto3.client('iot')

    thing, cert, policy = create_thing_with_certificate(client)
    root_ca, private_key, certificate = create_certificate_tempfiles(cert)

    # Make sure all resources get cleaned up properly at exit
    atexit.register(remove_thing_with_certificate, client, thing, cert, policy)
    atexit.register(remove_certificate_tempfiles, root_ca, private_key, certificate)

    endpoint = client.describe_endpoint()

    # Get the important info to stdout
    logger.info("%r", endpoint)
    logger.info("%r", cert)

    mqtt_client = AWSIoTMQTTClient("myClient")
    mqtt_client.configureEndpoint(endpoint['endpointAddress'], 8883)
    mqtt_client.configureAutoReconnectBackoffTime(1, 32, 20)
    mqtt_client.configureOfflinePublishQueueing(-1)
    mqtt_client.configureDrainingFrequency(2)
    mqtt_client.configureCredentials(root_ca.name, private_key.name, certificate.name)
    mqtt_client.configureConnectDisconnectTimeout(10)
    mqtt_client.configureMQTTOperationTimeout(5)

    mqtt_client.connect(keepAliveIntervalSecond=5)
    mqtt_client.publish("keepaliveTest", cert['certificateId'], 0)

    while True:
        time.sleep(1)


if __name__ == '__main__':
    try:
        main()
    except (KeyboardInterrupt, SystemExit) as e:
        sys.exit(0)
